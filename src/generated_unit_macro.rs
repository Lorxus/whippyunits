// Auto-generated unit macro with human-readable triangular structure
// Generated by generate_unit_macros_clean.rs
// 
// This macro provides LSP-friendly declarative patterns for common unit expressions.
// For complex expressions not covered here, use proc_unit!() instead.

#[macro_export]
macro_rules! unit {
    // ============================================================================
    // SINGLE UNITS (Base units)
    // ============================================================================
    // Length units
    (mm) => { crate::Quantity<
                1, -1,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (m) => { crate::Quantity<
                1, 0,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (km) => { crate::Quantity<
                1, 1,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    // Mass units
    (mg) => { crate::Quantity<
                0, 9223372036854775807,
                1, -1,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (g) => { crate::Quantity<
                0, 9223372036854775807,
                1, 0,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (kg) => { crate::Quantity<
                0, 9223372036854775807,
                1, 1,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    // Time units
    (ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };

    // ============================================================================
    // UNITS WITH EXPONENTS (Squared, cubed, etc.)
    // ============================================================================
    // Length units with dynamic exponents
    (mm^$exp:tt) => { crate::Quantity<
                $exp, -1,
                0, 2147483647,
                0, 2147483647, 2147483647, 2147483647, 2147483647
            > };
    (m^$exp:tt) => { crate::Quantity<
                $exp, 0,
                0, 2147483647,
                0, 2147483647, 2147483647, 2147483647, 2147483647
            > };
    (km^$exp:tt) => { crate::Quantity<
                $exp, 1,
                0, 2147483647,
                0, 2147483647, 2147483647, 2147483647, 2147483647
            > };
    // Mass units with dynamic exponents
    (mg^$exp:tt) => { crate::Quantity<
                $exp, -1,
                0, 2147483647,
                0, 2147483647, 2147483647, 2147483647, 2147483647
            > };
    (g^$exp:tt) => { crate::Quantity<
                $exp, 0,
                0, 2147483647,
                0, 2147483647, 2147483647, 2147483647, 2147483647
            > };
    (kg^$exp:tt) => { crate::Quantity<
                $exp, 1,
                0, 2147483647,
                0, 2147483647, 2147483647, 2147483647, 2147483647
            > };
    // Time units with dynamic exponents
    (ms^$exp:tt) => { crate::Quantity<
                0, 2147483647,
                0, 2147483647,
                $exp, -3, 0, -3, -1
            > };
    (s^$exp:tt) => { crate::Quantity<
                0, 2147483647,
                0, 2147483647,
                $exp, 0, 0, 0, 0
            > };
    (min^$exp:tt) => { crate::Quantity<
                0, 2147483647,
                0, 2147483647,
                $exp, 2, 1, 1, 1
            > };

    // ============================================================================
    // COMPOUND UNITS (Two units multiplied)
    // ============================================================================
    // Length × Length
    (mm * mm) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (m * mm) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (m * m) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (km * mm) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (km * m) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    (km * km) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                0, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807
            > };
    // Mass × Time
    (mg * ms) => { crate::Quantity<
                0, 9223372036854775807,
                1, -1,
                1, -3, 0, -3, -1
            > };
    (mg * s) => { crate::Quantity<
                0, 9223372036854775807,
                1, -1,
                1, 0, 0, 0, 0
            > };
    (mg * min) => { crate::Quantity<
                0, 9223372036854775807,
                1, -1,
                1, 2, 1, 1, 1
            > };
    (g * ms) => { crate::Quantity<
                0, 9223372036854775807,
                1, 0,
                1, -3, 0, -3, -1
            > };
    (g * s) => { crate::Quantity<
                0, 9223372036854775807,
                1, 0,
                1, 0, 0, 0, 0
            > };
    (g * min) => { crate::Quantity<
                0, 9223372036854775807,
                1, 0,
                1, 2, 1, 1, 1
            > };
    (kg * ms) => { crate::Quantity<
                0, 9223372036854775807,
                1, 1,
                1, -3, 0, -3, -1
            > };
    (kg * s) => { crate::Quantity<
                0, 9223372036854775807,
                1, 1,
                1, 0, 0, 0, 0
            > };
    (kg * min) => { crate::Quantity<
                0, 9223372036854775807,
                1, 1,
                1, 2, 1, 1, 1
            > };

    // ============================================================================
    // VELOCITY UNITS (Length / Time)
    // ============================================================================
    (mm / ms) => { crate::Quantity<
                1, -1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (mm / s) => { crate::Quantity<
                1, -1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (mm / min) => { crate::Quantity<
                1, -1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (m / ms) => { crate::Quantity<
                1, 0,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (m / s) => { crate::Quantity<
                1, 0,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (m / min) => { crate::Quantity<
                1, 0,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (km / ms) => { crate::Quantity<
                1, 1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (km / s) => { crate::Quantity<
                1, 1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (km / min) => { crate::Quantity<
                1, 1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };

    // ============================================================================
    // ACCELERATION UNITS (Length / Time²)
    // ============================================================================
    (mm / ms^$exp:tt) => { crate::Quantity<
                $exp, -1,
                0, 2147483647,
                -$exp, -3, 0, -3, -1
            > };
    (mm / s^$exp:tt) => { crate::Quantity<
                $exp, -1,
                0, 2147483647,
                -$exp, 0, 0, 0, 0
            > };
    (mm / min^$exp:tt) => { crate::Quantity<
                $exp, -1,
                0, 2147483647,
                -$exp, 2, 1, 1, 1
            > };
    (m / ms^$exp:tt) => { crate::Quantity<
                $exp, 0,
                0, 2147483647,
                -$exp, -3, 0, -3, -1
            > };
    (m / s^$exp:tt) => { crate::Quantity<
                $exp, 0,
                0, 2147483647,
                -$exp, 0, 0, 0, 0
            > };
    (m / min^$exp:tt) => { crate::Quantity<
                $exp, 0,
                0, 2147483647,
                -$exp, 2, 1, 1, 1
            > };
    (km / ms^$exp:tt) => { crate::Quantity<
                $exp, 1,
                0, 2147483647,
                -$exp, -3, 0, -3, -1
            > };
    (km / s^$exp:tt) => { crate::Quantity<
                $exp, 1,
                0, 2147483647,
                -$exp, 0, 0, 0, 0
            > };
    (km / min^$exp:tt) => { crate::Quantity<
                $exp, 1,
                0, 2147483647,
                -$exp, 2, 1, 1, 1
            > };

    // ============================================================================
    // FORCE UNITS (Mass × Length / Time²)
    // ============================================================================
    (mg * mm / ms^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, -1,
                -$exp, -3, 0, -3, -1
            > };
    (mg * mm / s^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, -1,
                -$exp, 0, 0, 0, 0
            > };
    (mg * mm / min^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, -1,
                -$exp, 2, 1, 1, 1
            > };
    (mg * m / ms^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, -1,
                -$exp, -3, 0, -3, -1
            > };
    (mg * m / s^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, -1,
                -$exp, 0, 0, 0, 0
            > };
    (mg * m / min^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, -1,
                -$exp, 2, 1, 1, 1
            > };
    (mg * km / ms^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, -1,
                -$exp, -3, 0, -3, -1
            > };
    (mg * km / s^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, -1,
                -$exp, 0, 0, 0, 0
            > };
    (mg * km / min^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, -1,
                -$exp, 2, 1, 1, 1
            > };
    (g * mm / ms^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, 0,
                -$exp, -3, 0, -3, -1
            > };
    (g * mm / s^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, 0,
                -$exp, 0, 0, 0, 0
            > };
    (g * mm / min^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, 0,
                -$exp, 2, 1, 1, 1
            > };
    (g * m / ms^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, 0,
                -$exp, -3, 0, -3, -1
            > };
    (g * m / s^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, 0,
                -$exp, 0, 0, 0, 0
            > };
    (g * m / min^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, 0,
                -$exp, 2, 1, 1, 1
            > };
    (g * km / ms^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, 0,
                -$exp, -3, 0, -3, -1
            > };
    (g * km / s^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, 0,
                -$exp, 0, 0, 0, 0
            > };
    (g * km / min^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, 0,
                -$exp, 2, 1, 1, 1
            > };
    (kg * mm / ms^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, 1,
                -$exp, -3, 0, -3, -1
            > };
    (kg * mm / s^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, 1,
                -$exp, 0, 0, 0, 0
            > };
    (kg * mm / min^$exp:tt) => { crate::Quantity<
                $exp, -1,
                $exp, 1,
                -$exp, 2, 1, 1, 1
            > };
    (kg * m / ms^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, 1,
                -$exp, -3, 0, -3, -1
            > };
    (kg * m / s^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, 1,
                -$exp, 0, 0, 0, 0
            > };
    (kg * m / min^$exp:tt) => { crate::Quantity<
                $exp, 0,
                $exp, 1,
                -$exp, 2, 1, 1, 1
            > };
    (kg * km / ms^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, 1,
                -$exp, -3, 0, -3, -1
            > };
    (kg * km / s^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, 1,
                -$exp, 0, 0, 0, 0
            > };
    (kg * km / min^$exp:tt) => { crate::Quantity<
                $exp, 1,
                $exp, 1,
                -$exp, 2, 1, 1, 1
            > };

    // ============================================================================
    // ENERGY UNITS (Mass × Length² / Time²)
    // ============================================================================
    (mg * mm^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, -1,
                -$exp2, -3, 0, -3, -1
            > };
    (mg * mm^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, -1,
                -$exp2, 0, 0, 0, 0
            > };
    (mg * mm^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, -1,
                -$exp2, 2, 1, 1, 1
            > };
    (mg * m^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, -1,
                -$exp2, -3, 0, -3, -1
            > };
    (mg * m^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, -1,
                -$exp2, 0, 0, 0, 0
            > };
    (mg * m^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, -1,
                -$exp2, 2, 1, 1, 1
            > };
    (mg * km^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, -1,
                -$exp2, -3, 0, -3, -1
            > };
    (mg * km^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, -1,
                -$exp2, 0, 0, 0, 0
            > };
    (mg * km^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, -1,
                -$exp2, 2, 1, 1, 1
            > };
    (g * mm^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 0,
                -$exp2, -3, 0, -3, -1
            > };
    (g * mm^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 0,
                -$exp2, 0, 0, 0, 0
            > };
    (g * mm^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 0,
                -$exp2, 2, 1, 1, 1
            > };
    (g * m^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 0,
                -$exp2, -3, 0, -3, -1
            > };
    (g * m^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 0,
                -$exp2, 0, 0, 0, 0
            > };
    (g * m^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 0,
                -$exp2, 2, 1, 1, 1
            > };
    (g * km^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 0,
                -$exp2, -3, 0, -3, -1
            > };
    (g * km^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 0,
                -$exp2, 0, 0, 0, 0
            > };
    (g * km^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 0,
                -$exp2, 2, 1, 1, 1
            > };
    (kg * mm^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 1,
                -$exp2, -3, 0, -3, -1
            > };
    (kg * mm^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 1,
                -$exp2, 0, 0, 0, 0
            > };
    (kg * mm^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 1,
                -$exp2, 2, 1, 1, 1
            > };
    (kg * m^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 1,
                -$exp2, -3, 0, -3, -1
            > };
    (kg * m^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 1,
                -$exp2, 0, 0, 0, 0
            > };
    (kg * m^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 1,
                -$exp2, 2, 1, 1, 1
            > };
    (kg * km^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 1,
                -$exp2, -3, 0, -3, -1
            > };
    (kg * km^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 1,
                -$exp2, 0, 0, 0, 0
            > };
    (kg * km^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 1,
                -$exp2, 2, 1, 1, 1
            > };

    // ============================================================================
    // POWER UNITS (Mass × Length² / Time³)
    // ============================================================================
    (mg * mm^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, -1,
                -$exp2, -3, 0, -3, -1
            > };
    (mg * mm^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, -1,
                -$exp2, 0, 0, 0, 0
            > };
    (mg * mm^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, -1,
                -$exp2, 2, 1, 1, 1
            > };
    (mg * m^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, -1,
                -$exp2, -3, 0, -3, -1
            > };
    (mg * m^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, -1,
                -$exp2, 0, 0, 0, 0
            > };
    (mg * m^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, -1,
                -$exp2, 2, 1, 1, 1
            > };
    (mg * km^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, -1,
                -$exp2, -3, 0, -3, -1
            > };
    (mg * km^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, -1,
                -$exp2, 0, 0, 0, 0
            > };
    (mg * km^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, -1,
                -$exp2, 2, 1, 1, 1
            > };
    (g * mm^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 0,
                -$exp2, -3, 0, -3, -1
            > };
    (g * mm^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 0,
                -$exp2, 0, 0, 0, 0
            > };
    (g * mm^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 0,
                -$exp2, 2, 1, 1, 1
            > };
    (g * m^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 0,
                -$exp2, -3, 0, -3, -1
            > };
    (g * m^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 0,
                -$exp2, 0, 0, 0, 0
            > };
    (g * m^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 0,
                -$exp2, 2, 1, 1, 1
            > };
    (g * km^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 0,
                -$exp2, -3, 0, -3, -1
            > };
    (g * km^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 0,
                -$exp2, 0, 0, 0, 0
            > };
    (g * km^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 0,
                -$exp2, 2, 1, 1, 1
            > };
    (kg * mm^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 1,
                -$exp2, -3, 0, -3, -1
            > };
    (kg * mm^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 1,
                -$exp2, 0, 0, 0, 0
            > };
    (kg * mm^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, -1,
                $exp1, 1,
                -$exp2, 2, 1, 1, 1
            > };
    (kg * m^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 1,
                -$exp2, -3, 0, -3, -1
            > };
    (kg * m^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 1,
                -$exp2, 0, 0, 0, 0
            > };
    (kg * m^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 0,
                $exp1, 1,
                -$exp2, 2, 1, 1, 1
            > };
    (kg * km^$exp1:tt / ms^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 1,
                -$exp2, -3, 0, -3, -1
            > };
    (kg * km^$exp1:tt / s^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 1,
                -$exp2, 0, 0, 0, 0
            > };
    (kg * km^$exp1:tt / min^$exp2:tt) => { crate::Quantity<
                $exp1, 1,
                $exp1, 1,
                -$exp2, 2, 1, 1, 1
            > };

    // ============================================================================
    // COMPLEX COMPOUND UNITS
    // ============================================================================
    (mm * mm / ms) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (mm * mm / s) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (mm * mm / min) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (mm * m / ms) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (mm * m / s) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (mm * m / min) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (mm * km / ms) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (mm * km / s) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (mm * km / min) => { crate::Quantity<
                2, -1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (m * mm / ms) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (m * mm / s) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (m * mm / min) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (m * m / ms) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (m * m / s) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (m * m / min) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (m * km / ms) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (m * km / s) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (m * km / min) => { crate::Quantity<
                2, 0,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (km * mm / ms) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (km * mm / s) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (km * mm / min) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (km * m / ms) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (km * m / s) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (km * m / min) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (km * km / ms) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, -3, 0, -3, -1
            > };
    (km * km / s) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, 0, 0, 0, 0
            > };
    (km * km / min) => { crate::Quantity<
                2, 1,
                0, 9223372036854775807,
                -1, 2, 1, 1, 1
            > };
    (mg * mg / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, -3, 0, -3, -1
            > };
    (mg * mg / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, 0, 0, 0, 0
            > };
    (mg * mg / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, 2, 1, 1, 1
            > };
    (mg * g / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, -3, 0, -3, -1
            > };
    (mg * g / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, 0, 0, 0, 0
            > };
    (mg * g / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, 2, 1, 1, 1
            > };
    (mg * kg / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, -3, 0, -3, -1
            > };
    (mg * kg / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, 0, 0, 0, 0
            > };
    (mg * kg / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, -1,
                -1, 2, 1, 1, 1
            > };
    (g * mg / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, -3, 0, -3, -1
            > };
    (g * mg / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, 0, 0, 0, 0
            > };
    (g * mg / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, 2, 1, 1, 1
            > };
    (g * g / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, -3, 0, -3, -1
            > };
    (g * g / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, 0, 0, 0, 0
            > };
    (g * g / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, 2, 1, 1, 1
            > };
    (g * kg / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, -3, 0, -3, -1
            > };
    (g * kg / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, 0, 0, 0, 0
            > };
    (g * kg / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, 0,
                -1, 2, 1, 1, 1
            > };
    (kg * mg / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, -3, 0, -3, -1
            > };
    (kg * mg / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, 0, 0, 0, 0
            > };
    (kg * mg / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, 2, 1, 1, 1
            > };
    (kg * g / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, -3, 0, -3, -1
            > };
    (kg * g / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, 0, 0, 0, 0
            > };
    (kg * g / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, 2, 1, 1, 1
            > };
    (kg * kg / ms) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, -3, 0, -3, -1
            > };
    (kg * kg / s) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, 0, 0, 0, 0
            > };
    (kg * kg / min) => { crate::Quantity<
                0, 9223372036854775807,
                2, 1,
                -1, 2, 1, 1, 1
            > };
    (ms * ms / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * ms / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * ms / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * s / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * s / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * s / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * min / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * min / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (ms * min / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, -3, 0, -3, -1
            > };
    (s * ms / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * ms / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * ms / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * s / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * s / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * s / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * min / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * min / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (s * min / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 0, 0, 0, 0
            > };
    (min * ms / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * ms / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * ms / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * s / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * s / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * s / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * min / ms) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * min / s) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };
    (min * min / min) => { crate::Quantity<
                0, 9223372036854775807,
                0, 9223372036854775807,
                1, 2, 1, 1, 1
            > };

    // ============================================================================
    // CATCH-ALL FOR UNKNOWN UNITS
    // ============================================================================
    ($unknown:tt) => {
        compile_error!(concat!("Unknown unit: ", stringify!($unknown), ". Use proc_unit!() for complex expressions."))
    };
}
