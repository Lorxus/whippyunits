// Auto-generated unit macro with human-readable triangular structure
// Generated by generate_unit_macros.rs
// 
// This macro provides LSP-friendly declarative patterns for common unit expressions.
// For complex expressions not covered here, use proc_unit!() instead.

#[macro_export]
macro_rules! unit {
    // ============================================================================
    // SINGLE UNITS (Base units)
    // ============================================================================
    // Length units
    (mm) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Mass units
    (mg) => { crate::Quantity<
                0, {isize::MAX},
                1, -1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (g) => { crate::Quantity<
                0, {isize::MAX},
                1, 0,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (kg) => { crate::Quantity<
                0, {isize::MAX},
                1, 1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Time units
    (ms) => { crate::Quantity<
                0, {isize::MAX},
                0, {isize::MAX},
                1, -3, 0, -3, -1
            > };
    (s) => { crate::Quantity<
                0, {isize::MAX},
                0, {isize::MAX},
                1, 0, 0, 0, 0
            > };
    (min) => { crate::Quantity<
                0, {isize::MAX},
                0, {isize::MAX},
                1, 2, 1, 1, 1
            > };

    // ============================================================================
    // UNITS WITH EXPONENTS (Squared, cubed, etc.)
    // ============================================================================
    // Length squared
    (mm^2) => { crate::Quantity<
                2, -1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m^2) => { crate::Quantity<
                2, 0,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km^2) => { crate::Quantity<
                2, 1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Length cubed
    (mm^3) => { crate::Quantity<
                3, -1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m^3) => { crate::Quantity<
                3, 0,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km^3) => { crate::Quantity<
                3, 1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Mass squared
    (mg^2) => { crate::Quantity<
                0, {isize::MAX},
                2, -1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (g^2) => { crate::Quantity<
                0, {isize::MAX},
                2, 0,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (kg^2) => { crate::Quantity<
                0, {isize::MAX},
                2, 1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Time squared
    (ms^2) => { crate::Quantity<
                0, {isize::MAX},
                0, {isize::MAX},
                2, -3, 0, -3, -1
            > };
    (s^2) => { crate::Quantity<
                0, {isize::MAX},
                0, {isize::MAX},
                2, 0, 0, 0, 0
            > };
    (min^2) => { crate::Quantity<
                0, {isize::MAX},
                0, {isize::MAX},
                2, 2, 1, 1, 1
            > };

    // ============================================================================
    // COMPOUND UNITS (Two units multiplied)
    // ============================================================================
    // Length × Length
    (mm * mm) => { crate::Quantity<
                2, -1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m * mm) => { crate::Quantity<
                2, 0,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m * m) => { crate::Quantity<
                2, 0,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km * mm) => { crate::Quantity<
                2, 1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km * m) => { crate::Quantity<
                2, 1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km * km) => { crate::Quantity<
                2, 1,
                0, {isize::MAX},
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Length × Mass
    (mm * mg) => { crate::Quantity<
                1, -1,
                1, -1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (mm * g) => { crate::Quantity<
                1, -1,
                1, 0,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (mm * kg) => { crate::Quantity<
                1, -1,
                1, 1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m * mg) => { crate::Quantity<
                1, 0,
                1, -1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m * g) => { crate::Quantity<
                1, 0,
                1, 0,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (m * kg) => { crate::Quantity<
                1, 0,
                1, 1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km * mg) => { crate::Quantity<
                1, 1,
                1, -1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km * g) => { crate::Quantity<
                1, 1,
                1, 0,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    (km * kg) => { crate::Quantity<
                1, 1,
                1, 1,
                0, {isize::MAX}, {isize::MAX}, {isize::MAX}, {isize::MAX}
            > };
    // Length × Time
    (mm * ms) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                1, -3, 0, -3, -1
            > };
    (mm * s) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                1, 0, 0, 0, 0
            > };
    (mm * min) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                1, 2, 1, 1, 1
            > };
    (m * ms) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                1, -3, 0, -3, -1
            > };
    (m * s) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                1, 0, 0, 0, 0
            > };
    (m * min) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                1, 2, 1, 1, 1
            > };
    (km * ms) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                1, -3, 0, -3, -1
            > };
    (km * s) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                1, 0, 0, 0, 0
            > };
    (km * min) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                1, 2, 1, 1, 1
            > };
    // Mass × Time
    (mg * ms) => { crate::Quantity<
                0, {isize::MAX},
                1, -1,
                1, -3, 0, -3, -1
            > };
    (mg * s) => { crate::Quantity<
                0, {isize::MAX},
                1, -1,
                1, 0, 0, 0, 0
            > };
    (mg * min) => { crate::Quantity<
                0, {isize::MAX},
                1, -1,
                1, 2, 1, 1, 1
            > };
    (g * ms) => { crate::Quantity<
                0, {isize::MAX},
                1, 0,
                1, -3, 0, -3, -1
            > };
    (g * s) => { crate::Quantity<
                0, {isize::MAX},
                1, 0,
                1, 0, 0, 0, 0
            > };
    (g * min) => { crate::Quantity<
                0, {isize::MAX},
                1, 0,
                1, 2, 1, 1, 1
            > };
    (kg * ms) => { crate::Quantity<
                0, {isize::MAX},
                1, 1,
                1, -3, 0, -3, -1
            > };
    (kg * s) => { crate::Quantity<
                0, {isize::MAX},
                1, 1,
                1, 0, 0, 0, 0
            > };
    (kg * min) => { crate::Quantity<
                0, {isize::MAX},
                1, 1,
                1, 2, 1, 1, 1
            > };

    // ============================================================================
    // VELOCITY UNITS (Length / Time)
    // ============================================================================
    (mm * ms^-1) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -1, -3, 0, -3, -1
            > };
    (mm/ms) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -1, -3, 0, -3, -1
            > };
    (mm * s^-1) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -1, 0, 0, 0, 0
            > };
    (mm/s) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -1, 0, 0, 0, 0
            > };
    (mm * min^-1) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -1, 2, 1, 1, 1
            > };
    (mm/min) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -1, 2, 1, 1, 1
            > };
    (m * ms^-1) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -1, -3, 0, -3, -1
            > };
    (m/ms) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -1, -3, 0, -3, -1
            > };
    (m * s^-1) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -1, 0, 0, 0, 0
            > };
    (m/s) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -1, 0, 0, 0, 0
            > };
    (m * min^-1) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -1, 2, 1, 1, 1
            > };
    (m/min) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -1, 2, 1, 1, 1
            > };
    (km * ms^-1) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -1, -3, 0, -3, -1
            > };
    (km/ms) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -1, -3, 0, -3, -1
            > };
    (km * s^-1) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -1, 0, 0, 0, 0
            > };
    (km/s) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -1, 0, 0, 0, 0
            > };
    (km * min^-1) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -1, 2, 1, 1, 1
            > };
    (km/min) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -1, 2, 1, 1, 1
            > };

    // ============================================================================
    // ACCELERATION UNITS (Length / Time²)
    // ============================================================================
    (mm * ms^-2) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -2, -3, 0, -3, -1
            > };
    (mm/ms^2) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -2, -3, 0, -3, -1
            > };
    (mm * s^-2) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -2, 0, 0, 0, 0
            > };
    (mm/s^2) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -2, 0, 0, 0, 0
            > };
    (mm * min^-2) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -2, 2, 1, 1, 1
            > };
    (mm/min^2) => { crate::Quantity<
                1, -1,
                0, {isize::MAX},
                -2, 2, 1, 1, 1
            > };
    (m * ms^-2) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -2, -3, 0, -3, -1
            > };
    (m/ms^2) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -2, -3, 0, -3, -1
            > };
    (m * s^-2) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -2, 0, 0, 0, 0
            > };
    (m/s^2) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -2, 0, 0, 0, 0
            > };
    (m * min^-2) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -2, 2, 1, 1, 1
            > };
    (m/min^2) => { crate::Quantity<
                1, 0,
                0, {isize::MAX},
                -2, 2, 1, 1, 1
            > };
    (km * ms^-2) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -2, -3, 0, -3, -1
            > };
    (km/ms^2) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -2, -3, 0, -3, -1
            > };
    (km * s^-2) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -2, 0, 0, 0, 0
            > };
    (km/s^2) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -2, 0, 0, 0, 0
            > };
    (km * min^-2) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -2, 2, 1, 1, 1
            > };
    (km/min^2) => { crate::Quantity<
                1, 1,
                0, {isize::MAX},
                -2, 2, 1, 1, 1
            > };

    // ============================================================================
    // FORCE UNITS (Mass × Length / Time²)
    // ============================================================================
    (mg * mm * ms^-2) => { crate::Quantity<
                1, -1,
                1, -1,
                -2, -3, 0, -3, -1
            > };
    (mg * mm * s^-2) => { crate::Quantity<
                1, -1,
                1, -1,
                -2, 0, 0, 0, 0
            > };
    (mg * mm * min^-2) => { crate::Quantity<
                1, -1,
                1, -1,
                -2, 2, 1, 1, 1
            > };
    (mg * m * ms^-2) => { crate::Quantity<
                1, 0,
                1, -1,
                -2, -3, 0, -3, -1
            > };
    (mg * m * s^-2) => { crate::Quantity<
                1, 0,
                1, -1,
                -2, 0, 0, 0, 0
            > };
    (mg * m * min^-2) => { crate::Quantity<
                1, 0,
                1, -1,
                -2, 2, 1, 1, 1
            > };
    (mg * km * ms^-2) => { crate::Quantity<
                1, 1,
                1, -1,
                -2, -3, 0, -3, -1
            > };
    (mg * km * s^-2) => { crate::Quantity<
                1, 1,
                1, -1,
                -2, 0, 0, 0, 0
            > };
    (mg * km * min^-2) => { crate::Quantity<
                1, 1,
                1, -1,
                -2, 2, 1, 1, 1
            > };
    (g * mm * ms^-2) => { crate::Quantity<
                1, -1,
                1, 0,
                -2, -3, 0, -3, -1
            > };
    (g * mm * s^-2) => { crate::Quantity<
                1, -1,
                1, 0,
                -2, 0, 0, 0, 0
            > };
    (g * mm * min^-2) => { crate::Quantity<
                1, -1,
                1, 0,
                -2, 2, 1, 1, 1
            > };
    (g * m * ms^-2) => { crate::Quantity<
                1, 0,
                1, 0,
                -2, -3, 0, -3, -1
            > };
    (g * m * s^-2) => { crate::Quantity<
                1, 0,
                1, 0,
                -2, 0, 0, 0, 0
            > };
    (g * m * min^-2) => { crate::Quantity<
                1, 0,
                1, 0,
                -2, 2, 1, 1, 1
            > };
    (g * km * ms^-2) => { crate::Quantity<
                1, 1,
                1, 0,
                -2, -3, 0, -3, -1
            > };
    (g * km * s^-2) => { crate::Quantity<
                1, 1,
                1, 0,
                -2, 0, 0, 0, 0
            > };
    (g * km * min^-2) => { crate::Quantity<
                1, 1,
                1, 0,
                -2, 2, 1, 1, 1
            > };
    (kg * mm * ms^-2) => { crate::Quantity<
                1, -1,
                1, 1,
                -2, -3, 0, -3, -1
            > };
    (kg * mm * s^-2) => { crate::Quantity<
                1, -1,
                1, 1,
                -2, 0, 0, 0, 0
            > };
    (kg * mm * min^-2) => { crate::Quantity<
                1, -1,
                1, 1,
                -2, 2, 1, 1, 1
            > };
    (kg * m * ms^-2) => { crate::Quantity<
                1, 0,
                1, 1,
                -2, -3, 0, -3, -1
            > };
    (kg * m * s^-2) => { crate::Quantity<
                1, 0,
                1, 1,
                -2, 0, 0, 0, 0
            > };
    (kg * m * min^-2) => { crate::Quantity<
                1, 0,
                1, 1,
                -2, 2, 1, 1, 1
            > };
    (kg * km * ms^-2) => { crate::Quantity<
                1, 1,
                1, 1,
                -2, -3, 0, -3, -1
            > };
    (kg * km * s^-2) => { crate::Quantity<
                1, 1,
                1, 1,
                -2, 0, 0, 0, 0
            > };
    (kg * km * min^-2) => { crate::Quantity<
                1, 1,
                1, 1,
                -2, 2, 1, 1, 1
            > };

    // ============================================================================
    // ENERGY UNITS (Mass × Length² / Time²)
    // ============================================================================
    (mg * mm^2 * ms^-2) => { crate::Quantity<
                2, -1,
                1, -1,
                -2, -3, 0, -3, -1
            > };
    (mg * mm^2 * s^-2) => { crate::Quantity<
                2, -1,
                1, -1,
                -2, 0, 0, 0, 0
            > };
    (mg * mm^2 * min^-2) => { crate::Quantity<
                2, -1,
                1, -1,
                -2, 2, 1, 1, 1
            > };
    (mg * m^2 * ms^-2) => { crate::Quantity<
                2, 0,
                1, -1,
                -2, -3, 0, -3, -1
            > };
    (mg * m^2 * s^-2) => { crate::Quantity<
                2, 0,
                1, -1,
                -2, 0, 0, 0, 0
            > };
    (mg * m^2 * min^-2) => { crate::Quantity<
                2, 0,
                1, -1,
                -2, 2, 1, 1, 1
            > };
    (mg * km^2 * ms^-2) => { crate::Quantity<
                2, 1,
                1, -1,
                -2, -3, 0, -3, -1
            > };
    (mg * km^2 * s^-2) => { crate::Quantity<
                2, 1,
                1, -1,
                -2, 0, 0, 0, 0
            > };
    (mg * km^2 * min^-2) => { crate::Quantity<
                2, 1,
                1, -1,
                -2, 2, 1, 1, 1
            > };
    (g * mm^2 * ms^-2) => { crate::Quantity<
                2, -1,
                1, 0,
                -2, -3, 0, -3, -1
            > };
    (g * mm^2 * s^-2) => { crate::Quantity<
                2, -1,
                1, 0,
                -2, 0, 0, 0, 0
            > };
    (g * mm^2 * min^-2) => { crate::Quantity<
                2, -1,
                1, 0,
                -2, 2, 1, 1, 1
            > };
    (g * m^2 * ms^-2) => { crate::Quantity<
                2, 0,
                1, 0,
                -2, -3, 0, -3, -1
            > };
    (g * m^2 * s^-2) => { crate::Quantity<
                2, 0,
                1, 0,
                -2, 0, 0, 0, 0
            > };
    (g * m^2 * min^-2) => { crate::Quantity<
                2, 0,
                1, 0,
                -2, 2, 1, 1, 1
            > };
    (g * km^2 * ms^-2) => { crate::Quantity<
                2, 1,
                1, 0,
                -2, -3, 0, -3, -1
            > };
    (g * km^2 * s^-2) => { crate::Quantity<
                2, 1,
                1, 0,
                -2, 0, 0, 0, 0
            > };
    (g * km^2 * min^-2) => { crate::Quantity<
                2, 1,
                1, 0,
                -2, 2, 1, 1, 1
            > };
    (kg * mm^2 * ms^-2) => { crate::Quantity<
                2, -1,
                1, 1,
                -2, -3, 0, -3, -1
            > };
    (kg * mm^2 * s^-2) => { crate::Quantity<
                2, -1,
                1, 1,
                -2, 0, 0, 0, 0
            > };
    (kg * mm^2 * min^-2) => { crate::Quantity<
                2, -1,
                1, 1,
                -2, 2, 1, 1, 1
            > };
    (kg * m^2 * ms^-2) => { crate::Quantity<
                2, 0,
                1, 1,
                -2, -3, 0, -3, -1
            > };
    (kg * m^2 * s^-2) => { crate::Quantity<
                2, 0,
                1, 1,
                -2, 0, 0, 0, 0
            > };
    (kg * m^2 * min^-2) => { crate::Quantity<
                2, 0,
                1, 1,
                -2, 2, 1, 1, 1
            > };
    (kg * km^2 * ms^-2) => { crate::Quantity<
                2, 1,
                1, 1,
                -2, -3, 0, -3, -1
            > };
    (kg * km^2 * s^-2) => { crate::Quantity<
                2, 1,
                1, 1,
                -2, 0, 0, 0, 0
            > };
    (kg * km^2 * min^-2) => { crate::Quantity<
                2, 1,
                1, 1,
                -2, 2, 1, 1, 1
            > };

    // ============================================================================
    // POWER UNITS (Mass × Length² / Time³)
    // ============================================================================
    (mg * mm^2 * ms^-3) => { crate::Quantity<
                2, -1,
                1, -1,
                -3, -3, 0, -3, -1
            > };
    (mg * mm^2 * s^-3) => { crate::Quantity<
                2, -1,
                1, -1,
                -3, 0, 0, 0, 0
            > };
    (mg * mm^2 * min^-3) => { crate::Quantity<
                2, -1,
                1, -1,
                -3, 2, 1, 1, 1
            > };
    (mg * m^2 * ms^-3) => { crate::Quantity<
                2, 0,
                1, -1,
                -3, -3, 0, -3, -1
            > };
    (mg * m^2 * s^-3) => { crate::Quantity<
                2, 0,
                1, -1,
                -3, 0, 0, 0, 0
            > };
    (mg * m^2 * min^-3) => { crate::Quantity<
                2, 0,
                1, -1,
                -3, 2, 1, 1, 1
            > };
    (mg * km^2 * ms^-3) => { crate::Quantity<
                2, 1,
                1, -1,
                -3, -3, 0, -3, -1
            > };
    (mg * km^2 * s^-3) => { crate::Quantity<
                2, 1,
                1, -1,
                -3, 0, 0, 0, 0
            > };
    (mg * km^2 * min^-3) => { crate::Quantity<
                2, 1,
                1, -1,
                -3, 2, 1, 1, 1
            > };
    (g * mm^2 * ms^-3) => { crate::Quantity<
                2, -1,
                1, 0,
                -3, -3, 0, -3, -1
            > };
    (g * mm^2 * s^-3) => { crate::Quantity<
                2, -1,
                1, 0,
                -3, 0, 0, 0, 0
            > };
    (g * mm^2 * min^-3) => { crate::Quantity<
                2, -1,
                1, 0,
                -3, 2, 1, 1, 1
            > };
    (g * m^2 * ms^-3) => { crate::Quantity<
                2, 0,
                1, 0,
                -3, -3, 0, -3, -1
            > };
    (g * m^2 * s^-3) => { crate::Quantity<
                2, 0,
                1, 0,
                -3, 0, 0, 0, 0
            > };
    (g * m^2 * min^-3) => { crate::Quantity<
                2, 0,
                1, 0,
                -3, 2, 1, 1, 1
            > };
    (g * km^2 * ms^-3) => { crate::Quantity<
                2, 1,
                1, 0,
                -3, -3, 0, -3, -1
            > };
    (g * km^2 * s^-3) => { crate::Quantity<
                2, 1,
                1, 0,
                -3, 0, 0, 0, 0
            > };
    (g * km^2 * min^-3) => { crate::Quantity<
                2, 1,
                1, 0,
                -3, 2, 1, 1, 1
            > };
    (kg * mm^2 * ms^-3) => { crate::Quantity<
                2, -1,
                1, 1,
                -3, -3, 0, -3, -1
            > };
    (kg * mm^2 * s^-3) => { crate::Quantity<
                2, -1,
                1, 1,
                -3, 0, 0, 0, 0
            > };
    (kg * mm^2 * min^-3) => { crate::Quantity<
                2, -1,
                1, 1,
                -3, 2, 1, 1, 1
            > };
    (kg * m^2 * ms^-3) => { crate::Quantity<
                2, 0,
                1, 1,
                -3, -3, 0, -3, -1
            > };
    (kg * m^2 * s^-3) => { crate::Quantity<
                2, 0,
                1, 1,
                -3, 0, 0, 0, 0
            > };
    (kg * m^2 * min^-3) => { crate::Quantity<
                2, 0,
                1, 1,
                -3, 2, 1, 1, 1
            > };
    (kg * km^2 * ms^-3) => { crate::Quantity<
                2, 1,
                1, 1,
                -3, -3, 0, -3, -1
            > };
    (kg * km^2 * s^-3) => { crate::Quantity<
                2, 1,
                1, 1,
                -3, 0, 0, 0, 0
            > };
    (kg * km^2 * min^-3) => { crate::Quantity<
                2, 1,
                1, 1,
                -3, 2, 1, 1, 1
            > };

    // ============================================================================
    // CATCH-ALL FOR UNKNOWN UNITS
    // ============================================================================
    ($unknown:tt) => {
        compile_error!(concat!("Unknown unit: ", stringify!($unknown), ". Use proc_unit!() for complex expressions."))
    };
}
