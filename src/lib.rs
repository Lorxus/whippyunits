#![cfg_attr(not(feature = "std"), no_std)]
#![feature(generic_const_exprs)]
#![feature(trait_alias)]

#[cfg(not(feature = "std"))]
extern crate alloc;

// ============================================================================
// Core Types and Enums
// ============================================================================

pub trait IsI16<const S: i16> {}
impl<const S: i16> IsI16<S> for () {}

// Helper trait for generating documentation in type positions
#[doc(hidden)]
pub struct Helper<const N: usize, ActualT>(ActualT);

#[doc(hidden)]
pub trait GetSecondGeneric {
    type Type;
}

impl<const N: usize, T> GetSecondGeneric for Helper<N, T> {
    type Type = T;
}

#[doc(hidden)]
pub mod arithmetic_quantity_types;
pub mod default_declarators;
#[doc(hidden)]
pub mod scale_conversion;
#[doc(hidden)]
pub mod scoped_preferences;
#[doc(hidden)]
pub mod arithmetic;
pub mod dimension_traits;
#[doc(hidden)]
pub mod print;
pub mod quantity_type;
pub mod api;
pub mod serialization;
#[doc(hidden)]
pub mod value_macro;
#[doc(hidden)]
pub mod rescale_macro;

// Custom literals are now generated by the whippy_literals proc macro

// Re-export macros that need to be available at crate root
pub use scoped_preferences::*;

// Re-export the new quantity type structure
pub use quantity_type::{Scale, Dimension, _2, _3, _5, _Pi, _M, _L, _T, _I, _Î˜, _N, _J, _A};

// Re-export the proc macros for consumers to use
pub use whippyunits_proc_macros::define_generic_dimension;
pub use whippyunits_proc_macros::define_literals;
pub use whippyunits_proc_macros::local_unit_type;
pub use whippyunits_proc_macros::proc_unit as unit;
pub use whippyunits_proc_macros::generate_scoped_preferences;

// Re-export rescale functions from api module
pub use api::rescale;
pub use api::rescale_f64;
pub use api::rescale_f32;
pub use api::rescale_i8;
pub use api::rescale_i16;
pub use api::rescale_i32;
pub use api::rescale_i64;
pub use api::rescale_i128;
pub use api::rescale_u8;
pub use api::rescale_u16;
pub use api::rescale_u32;
pub use api::rescale_u64;
pub use api::rescale_u128;

// from_json, from_string, from_json_strict, and from_string_strict macros are exported via #[macro_export] in serialization.rs
// value! macro is exported via #[macro_export] in value_macro.rs
// rescale! macro is exported via #[macro_export] in rescale_macro.rs

